import 'package:flutter/material.dart';

import '../../Models/PostResponse.dart';
import '../../Models/SQL Entities/QuickLoanModel.dart';
import '../../Services/SqlService.dart';
import '../Component/CalendarPicker.dart';
import '../Component/TextFieldForm.dart';

class QuickLoanAddForm extends StatefulWidget {
  const QuickLoanAddForm({super.key});

  @override
  State<QuickLoanAddForm> createState() => _QuickLoanAddFormState();
}

class _QuickLoanAddFormState extends State<QuickLoanAddForm> {
  SQLService service = SQLService();
  GlobalKey<FormState> formstate = GlobalKey<FormState>();

  late CustomerModel _customerModel;
  late TextEditingController _controller;
  late LoanModel _loanModel;
  bool isFetching = false;

  Future<PostResponse?> saveLoan() async {
    if (!formstate.currentState!.validate()) {
      return null;
    }

    _loanModel.customer = _customerModel;
    return await service.saveLoan(_loanModel);
  }

  void clear() {
    setState(() {
      _customerModel = CustomerModel();
      _loanModel = LoanModel();
      formstate.currentState!.reset();
    });
  }

  @override
  void initState() {
    super.initState();

    _customerModel = CustomerModel();
    _loanModel = LoanModel();
    _controller = TextEditingController();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Form(
      key: formstate,
      child: SingleChildScrollView(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            TextFieldForm(
              "Customer Name",
              required: true,
              onChanged: (value) {
                _customerModel.name = value;
              },
            ),
            Flex(
              direction: Axis.horizontal,
              children: [
                Expanded(
                  flex: 1,
                  child: TextFieldForm("Mobile Number", required: true,
                      onChanged: (value) {
                    _customerModel.mobile = value;
                  }, type: TextInputType.phone),
                ),
                Expanded(
                  flex: 3,
                  child: TextFieldForm("Address", onChanged: (value) {
                    _customerModel.address = value;
                  }),
                )
              ],
            ),
            Flex(
              direction: Axis.horizontal,
              children: [
                Expanded(
                  child: TextFieldForm(
                    "ID",
                    onChanged: (value) {
                      _customerModel.aadhar = value;
                    },
                  ),
                ),
                Expanded(
                  child: TextFieldForm(
                    "Father's Name",
                    onChanged: (value) {
                      _customerModel.father = value;
                    },
                  ),
                ),
              ],
            ),
            Flex(
              direction: Axis.horizontal,
              children: [
                Expanded(
                  child: TextFieldForm(
                    "Witness Name",
                    onChanged: (value) {
                      _loanModel.witnessName = value;
                    },
                  ),
                ),
                Expanded(
                  child: TextFieldForm(
                    "Witness Mobile",
                    onChanged: (value) {
                      _loanModel.witnessMobile = value;
                    },
                  ),
                ),
                Expanded(
                  child: TextFieldForm(
                    "Witness Address",
                    onChanged: (value) {
                      _loanModel.witnessAddress = value;
                    },
                  ),
                )
              ],
            ),
            Row(
              children: [
                Expanded(
                    flex: 1,
                    child: TextFieldForm(
                      "Loan Amount",
                      required: true,
                      onChanged: (value) {
                        _loanModel.amount = int.tryParse(value) ?? 0;
                      },
                    )),
                Expanded(
                  flex: 1,
                  child: TextFieldForm(
                    "Installement Amount",
                    onChanged: (value) {
                      _loanModel.installement = int.tryParse(value) ?? 0;
                      setState(() {
                        _loanModel.agreedAmountSetter = "";
                      });
                    },
                    validator: (_) {
                      if (_loanModel.amount! > _loanModel.agreedAmount!) {
                        return "Agreed Amount should not be less than Loan amount";
                      }
                      return null;
                    },
                    required: true,
                  ),
                ),
                Expanded(
                    child: TextFieldForm("No of Days", onChanged: (value) {
                  _loanModel.days = int.tryParse(value) ?? 0;
                  setState(() {
                    _loanModel.endDateSetter = "";
                    _loanModel.agreedAmountSetter = "";
                  });
                })),
                Expanded(
                  flex: 1,
                  child: TextFieldForm(
                    _loanModel.agreedAmount?.toString() ?? "Agreement Amount",
                    enabled: false,
                    required: _loanModel.agreedAmount != null ? false : true,
                  ),
                ),
              ],
            ),
            Row(
              children: [
                Expanded(
                  child: CalendarPicker(
                    "Loan Start Date",
                    (date) {
                      _loanModel.startDate = date;
                      _loanModel.endDateSetter = "";
                      if (_loanModel.endDate != null) {
                        _controller.text = _loanModel.endDate!;
                      }
                    },
                  ),
                ),
                Expanded(
                  child: TextFieldForm(
                    "Loan Close Date",
                    controller: _controller,
                    enabled: false,
                  ),
                )
              ],
            ),
            TextFieldForm(
              "Remark",
              onChanged: (value) {
                _loanModel.remark = value;
              },
            ),
            Row(
              children: [
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ElevatedButton(
                        onPressed: isFetching
                            ? null
                            : () async {
                                var saveData = await saveLoan();
                                if (saveData == null) return;
                                ScaffoldMessenger.of(context).clearSnackBars();
                                ScaffoldMessenger.of(context).showSnackBar(
                                    SnackBar(
                                        content: Text(saveData.success
                                            ? saveData.msg
                                            : saveData.error)));
                                if (saveData.success) clear();
                              },
                        child: const Text("Add Loan")),
                  ),
                ),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ElevatedButton(
                        onPressed: () => clear(), child: const Text("Clear")),
                  ),
                ),
              ],
            )
          ],
        ),
      ),
    );
  }
}
